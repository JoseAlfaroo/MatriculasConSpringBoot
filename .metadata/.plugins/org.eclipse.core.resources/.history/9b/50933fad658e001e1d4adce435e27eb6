package com.wazaaa.joq.controllers;

import java.util.*;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;

import com.wazaaa.joq.interfaceservices.InterfaceDocenteService;
import com.wazaaa.joq.models.Docente;
import com.wazaaa.joq.models.Usuario;
import com.wazaaa.joq.services.UserService;

@Controller
@RequestMapping
public class DocenteController {
	
	@Autowired
	private InterfaceDocenteService interfaceDocenteService;
	
	private final UserService userService;
	
	//inicializando usuarioService
	public DocenteController(UserService userService) {
		this.userService = userService;
	}
	
	
	@GetMapping("/administrador/docentes")
	public String listarDocente(Model model) {
		List<Docente> docentes = interfaceDocenteService.listarDocente();
		
		/*Datos de usuario autenticado*/
		Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
		String username = authentication.getName();
		Usuario usuario = userService.getUserByEmail(username);
		
		//Aquí -> addAtribute("nombre de la variable en pagina web", variable interna)
		model.addAttribute("usuario", usuario);
		model.addAttribute("docentes", docentes);
		return "docentes";
	}
	
	@GetMapping("/administrador/docentes/nuevoDocente")
	public String agregarDocente(Model model) {
		
		/*Datos de usuario autenticado*/
		Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
		String username = authentication.getName();
		Usuario usuario = userService.getUserByEmail(username);
		
		//Aquí -> addAtribute("nombre de la variable en pagina web", variable interna)
		model.addAttribute("tit", "Registrar nuevo docente");
		model.addAttribute("usuario", usuario);
		model.addAttribute("docente", new Docente());
		return "formDocentes";
	}
	
	@PostMapping("/administrador/docentes/guardar")
	public String guardar(Docente d, Model model) {
		interfaceDocenteService.guardarDocente(d);
		return "redirect:/administrador/docentes";
	}
	
	@GetMapping("/administrador/docentes/editar/{id}")
	public String editar(@PathVariable int id, Model model) {
		
		/*Datos de usuario autenticado*/
		Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
		String username = authentication.getName();
		Usuario usuario = userService.getUserByEmail(username);
		
		//Aquí -> addAtribute("nombre de la variable en pagina web", variable interna)
		model.addAttribute("tit", "Modificar docente");
		model.addAttribute("usuario", usuario);
		
		Optional<Docente> docente = interfaceDocenteService.listarDocentePorId(id);
		model.addAttribute("docente", docente);
		return "formDocentes";
	}
	
	@GetMapping("/administrador/docentes/eliminar/{id}")
	public String eliminar(Model model, @PathVariable int id) {
		interfaceDocenteService.eliminarDocente(id);
		return "redirect:/";
	}
	
}
