package com.wazaaa.joq.controllers;

import com.lowagie.text.DocumentException;
import com.wazaaa.joq.interfaceservices.InterfaceCursoService;
import com.wazaaa.joq.interfaceservices.InterfaceMatriculaService;
import com.wazaaa.joq.models.Curso;
import com.wazaaa.joq.models.Matricula;
import com.wazaaa.joq.models.Usuario;
import com.wazaaa.joq.reports.MatriculasExporterPDF;
import com.wazaaa.joq.services.UserService;
import jakarta.servlet.http.HttpServletResponse;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;

import java.io.IOException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.Date;
import java.util.List;
import java.util.Optional;

@Controller
@RequestMapping
public class MatriculaController {
    private final InterfaceMatriculaService interfaceMatriculaService;
    private final InterfaceCursoService interfaceCursoService;
    private final UserService userService;

    @Autowired
    public MatriculaController(
            InterfaceMatriculaService interfaceMatriculaService,
            InterfaceCursoService interfaceCursoService,
            UserService userService) {
        this.interfaceMatriculaService = interfaceMatriculaService;
        this.interfaceCursoService = interfaceCursoService;
        this.userService = userService;
    }

    @GetMapping("/usuario/matriculas")
    public String listarMatricula(Model model) {
        List<Matricula> matriculas = interfaceMatriculaService.listarMatricula();
        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
        String username = authentication.getName();
        Usuario usuario = userService.getUserByEmail(username);
        model.addAttribute("usuario", usuario);
        model.addAttribute("matriculas", matriculas);
        return "matriculas";
    }

    @GetMapping("/usuario/matriculas/nuevaMatricula")
    public String agregarMatricula(Matricula m, Model model) {
    	
    	LocalDate fechaActual = LocalDate.now();
    	String fechaFormateada = fechaActual.format(DateTimeFormatter.ofPattern("dd-MM-yyyy"));
    	
    	
        List<Curso> cursos = interfaceCursoService.listarCurso();
        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
        String username = authentication.getName();
        Usuario usuario = userService.getUserByEmail(username);
        
        m.setFecha(fechaActual);
        model.addAttribute("tit", "Registrar nuevo docente");
        model.addAttribute("colortit", "bg-info-subtle");
        model.addAttribute("usuario", usuario);
        model.addAttribute("cursos", cursos);
        model.addAttribute("matricula", new Matricula());
        
        System.out.println(fechaFormateada);
        
        return "formMatriculas";
        
        
    }

    @PostMapping("/usuario/matriculas/guardar")
    public String guardar(@ModelAttribute Matricula m, Model model) {
        interfaceMatriculaService.guardarMatricula(m);
        return "redirect:/usuario/matriculas";
    }

    @GetMapping("/usuario/matriculas/editar/{id}")
    public String editar(@PathVariable int id, Model model) {
        List<Curso> cursos = interfaceCursoService.listarCurso();
        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
        String username = authentication.getName();
        Usuario usuario = userService.getUserByEmail(username);
        model.addAttribute("tit", "Modificar docente");
        model.addAttribute("colortit", "bg-warning-subtle");

        Optional<Matricula> matriculaOptional = interfaceMatriculaService.listarMatriculaPorId(id);
        if (matriculaOptional.isPresent()) {
            Matricula matricula = matriculaOptional.get();
            model.addAttribute("usuario", usuario);
            model.addAttribute("cursos", cursos);
            model.addAttribute("matricula", matricula);
        } else {
            // Handle the case where matricula is not found.
            // You might want to redirect or show an error message.
        }
        return "formMatriculas";
    }

    @GetMapping("/usuario/matriculas/eliminar/{id}")
    public String eliminar(@PathVariable int id) {
        interfaceMatriculaService.eliminarMatricula(id);
        return "redirect:/usuario/matriculas";
    }

    @GetMapping("/usuario/matriculas/exportarMatriculasPDF")
    public void exportarListadoDeMatriculasEnPDF(HttpServletResponse response)
            throws DocumentException, IOException {
        response.setContentType("application/pdf");
        DateFormat dateFormatter = new SimpleDateFormat("yyyy-MM-dd_HH:mm:ss");
        String fechaActual = dateFormatter.format(new Date());
        String cabecera = "Content-Disposition";
        String valor = "attachment; filename=EscuelaGlobal_Docentes_" + fechaActual + ".pdf";
        response.setHeader(cabecera, valor);
        List<Matricula> matriculas = interfaceMatriculaService.listarMatricula();
        MatriculasExporterPDF exporter = new MatriculasExporterPDF(matriculas);
        exporter.exportarMatriculas(response);
    }
}