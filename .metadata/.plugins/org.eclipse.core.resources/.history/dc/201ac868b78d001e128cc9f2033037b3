package com.wazaaa.joq.controllers;

import org.springframework.context.annotation.Bean;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContext;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.web.context.HttpSessionSecurityContextRepository;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import com.wazaaa.joq.models.Usuario;
import com.wazaaa.joq.services.UserService;

import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import jakarta.servlet.http.HttpSession;

@Controller
@RequestMapping("")
public class AuthController {
	
	
	private final UserService userService;
	private final AuthenticationManager authenticationManager;
	private final BCryptPasswordEncoder bCryptPasswordEncoder;
	
    public AuthController(UserService userService, AuthenticationManager authenticationManager, BCryptPasswordEncoder bCryptPasswordEncoder) {
        this.userService = userService;
        this.authenticationManager = authenticationManager;
        this.bCryptPasswordEncoder = bCryptPasswordEncoder;
    }
	
	@RequestMapping(value = "/login", method = RequestMethod.GET)
	public String login() {
		return "login";
	}
	
	
	@RequestMapping(value = "/register", method = RequestMethod.GET)
	public String register(HttpServletRequest request, HttpServletResponse response, Model model) {
		Usuario usuario = new Usuario();
		model.addAttribute("usuario", usuario);
		return "register";
	}
	
	@RequestMapping(value = "/register", method = RequestMethod.POST)
	public String createNewUser(HttpServletRequest request, HttpServletResponse response, @ModelAttribute("user") Usuario usuario) {
		try {
			usuario.setPassword(bCryptPasswordEncoder.encode(usuario.getPassword()));
			usuario.setRol("USUARIO");
			
			Usuario newUsuario = userService.createUser(usuario);
			

			return "redirect:/login";
			
		} catch (Exception e) {
			e.printStackTrace(); 
			return "redirect:/register?error";
		}
	}
	
	@RequestMapping(value = "/logout", method = RequestMethod.GET)
	public String logout(HttpServletRequest request) {
		HttpSession session = request.getSession();
		session.invalidate();
		SecurityContext securityContext = SecurityContextHolder.getContext();
		securityContext.setAuthentication(null);
		return "redirect:/login";
	}
	
	@GetMapping("/info")
	public String usuarioInfo(Authentication authentication) {
	    return "Usuario: " + authentication.getName() + ", Roles: " + authentication.getAuthorities();
	}
	
	
}
